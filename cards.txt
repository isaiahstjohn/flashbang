Does it mutate <span class="inline-code">arr</span>?<br><span class="inline-code">arr.concat(anotherArray)</span><br>	No<br>	<span class="inline-code">arr.concat(value1[, value2[, ...]])</span> takes one or more arrays or values as arguments.<br><div class="code"><pre><code><span class="hljs-keyword">var</span> array1 = [<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>];<br><span class="hljs-keyword">var</span> array2 = [<span class="hljs-string">'d'</span>, <span class="hljs-string">'e'</span>, <span class="hljs-string">'f'</span>];<br><br><span class="hljs-comment">//["a", "b", "c", "d", "e", "f"]</span><br>array1.concat(array2);<br></code></pre></div><br><a href='https://mdn.io/array/concat'>https://mdn.io/array/concat</a><br>
Does it mutate <span class="inline-code">arr</span>?<br><span class="inline-code">arr.copyWithin(target, start, end)</span><br>	Yes<br>	<span class="inline-code">arr.copyWithin(target[, start[, end]])</span><br>modifies and returns the array it is called on.<br><div class="code"><pre><code><span class="hljs-keyword">var</span> array1 = [<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>, <span class="hljs-string">'d'</span>, <span class="hljs-string">'e'</span>];<br><br><span class="hljs-comment">// copy to index 0 the element at index 3</span><br><span class="hljs-comment">// ["d", "b", "c", "d", "e"]</span><br>array1.copyWithin(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>);<br><br><span class="hljs-comment">// copy to index 1 all elements from index 3 to the end</span><br><span class="hljs-comment">// ["d", "d", "e", "d", "e"]</span><br>array1.copyWithin(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>);<br></code></pre></div><br><a href='https://mdn.io/array/copyWithin'>https://mdn.io/array/copyWithin</a><br>
Does it mutate <span class="inline-code">arr</span>?<br><span class="inline-code">arr.every(<span class="hljs-function">(<span class="hljs-params">cur</span>) =&gt;</span> cur &lt; <span class="hljs-number">10</span>)</span><br>	No<br>	<span class="inline-code">arr.every(callbackfn[, thisArg])</span> tests whether all elements in the array pass the test implemented by the provided function.<br><div class="code"><pre><code><span class="hljs-comment">// true</span><br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>].every(<span class="hljs-function">(<span class="hljs-params">cur</span>) =&gt;</span> cur &lt; <span class="hljs-number">10</span>);<br></code></pre></div><br><a href='https://mdn.io/array/every'>https://mdn.io/array/every</a><br>
Does it mutate <span class="inline-code">arr</span>?<br><span class="inline-code">arr.fill(value, start, end)</span><br>	Yes<br>	<span class="inline-code">arr.fill(value[, start[, end]])</span> fills all the elements of an array<br>from a start index to an end index with a static value.<br><div class="code"><pre><code><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>];<br><span class="hljs-comment">// [1, 2, 0, 0]</span><br>arr.fill(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>);<br><span class="hljs-comment">// [1, 5, 5, 5]</span><br>arr.fill(<span class="hljs-number">5</span>, <span class="hljs-number">1</span>);<br><span class="hljs-comment">// [6, 6, 6, 6]</span><br>arr.fill(<span class="hljs-number">6</span>)<br></code></pre></div><br><a href='https://mdn.io/array/fill'>https://mdn.io/array/fill</a><br>
Does it mutate <span class="inline-code">arr</span>?<br><span class="inline-code">arr.filter(<span class="hljs-function">(<span class="hljs-params">cur</span>) =&gt;</span> cur % <span class="hljs-number">2</span> === <span class="hljs-number">0</span>)</span><br>	No<br>	<span class="inline-code">arr.filter(callbackfn[, thisArg])</span> creates a new array with all elements that pass the test implemented by the provided function.<br><a href='https://mdn.io/array/filter'>https://mdn.io/array/filter</a><br>
Does it mutate <span class="inline-code">arr</span>?<br><span class="inline-code">arr.flat(<span class="hljs-literal">Infinity</span>)</span><br>	No<br>	<a href='https://mdn.io/array/flat'>https://mdn.io/array/flat</a><br>
Does it mutate <span class="inline-code">arr</span>?<br><span class="inline-code">arr.forEach( <span class="hljs-function"><span class="hljs-params">cur</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(cur) );</span><br>	No<br>	<a href='https://mdn.io/array/foreach'>https://mdn.io/array/foreach</a><br>
Does it mutate <span class="inline-code">arr</span>?<br><span class="inline-code">arr.map(<span class="hljs-function"><span class="hljs-params">cur</span> =&gt;</span> cur * <span class="hljs-number">2</span>);</span><br>	No<br>	<a href='https://mdn.io/array/map'>https://mdn.io/array/map</a><br>
Does it mutate <span class="inline-code">arr</span>?<br><span class="inline-code">arr.reduce(callback, initialValue)</span><br>	No<br>	<a href='https://mdn.io/array/reduce'>https://mdn.io/array/reduce</a><br>
Does it mutate <span class="inline-code">arr</span>?<br><span class="inline-code">arr.reduceRight(callback, initialValue)</span><br>	No<br>	<a href='https://mdn.io/array/reduceright'>https://mdn.io/array/reduceright</a><br>
Does it mutate <span class="inline-code">arr</span>?<br><span class="inline-code">arr.reverse()</span><br>	Yes<br>	<a href='https://mdn.io/array/reverse'>https://mdn.io/array/reverse</a><br>
Does it mutate <span class="inline-code">arr</span>?<br><span class="inline-code">arr.slice(start, end)</span><br>	No<br>	<a href='https://mdn.io/array/slice'>https://mdn.io/array/slice</a><br>
Does it mutate <span class="inline-code">arr</span>?<br><span class="inline-code">arr.some(<span class="hljs-function">(<span class="hljs-params">cur</span>) =&gt;</span> cur % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)</span><br>	No<br>	<a href='https://mdn.io/array/some'>https://mdn.io/array/some</a><br>
Does it mutate <span class="inline-code">arr</span>?<br><span class="inline-code">arr.sort(comparefn)</span><br>	Yes<br>	<a href='https://mdn.io/array/sort'>https://mdn.io/array/sort</a><br>
Does it mutate <span class="inline-code">arr</span>?<br><span class="inline-code">arr.splice(start, count[, item1[, item2[, ...]]])</span><br>	Yes<br>	<a href='https://mdn.io/array/splice'>https://mdn.io/array/splice</a><br>
JS execute<br><div class="code"><pre><code><span class="hljs-keyword">let</span> s = <span class="hljs-keyword">new</span>  <span class="hljs-built_in">Set</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br>s.has(<span class="hljs-number">2</span>)<br></code></pre></div><br>	TypeError: number 1 is not iterable (cannot read property Symbol(Symbol.iterator))<br>    at new Set (<anonymous>)<br>	Syntax: <span class="inline-code"><span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>([iterable])</span><br><br>Usage:<br><div class="code"><pre><code><span class="hljs-keyword">const</span> set1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]);<br><br><span class="hljs-built_in">console</span>.log(set1.has(<span class="hljs-number">1</span>));<br><span class="hljs-comment">// expected output: true</span><br></code></pre></div><br>
JS execute<br><div class="code"><pre><code><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyClass</span></span>{<br>  <span class="hljs-keyword">constructor</span>(){<br>    <span class="hljs-keyword">this</span>.add([a, b]){<br>      <span class="hljs-keyword">return</span> a + b;<br>    }<br>  }<br>}<br><br><span class="hljs-keyword">let</span> c = MyClass();<br>c.add([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>])<br></code></pre></div><br>	SyntaxError: Unexpected token '{'<br><br><span class="inline-code"><span class="hljs-keyword">this</span>.add([a, b]){}</span> is not the correct way to declare a method. Instead use<br><span class="inline-code"><span class="hljs-keyword">this</span>.add = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">[a, b]</span>)</span>{}</span><br><br><div class="code"><pre><code><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyClass</span></span>{<br>  <span class="hljs-keyword">constructor</span>(){<br>    <span class="hljs-keyword">this</span>.add = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">[a, b]</span>)</span>{<br>      <span class="hljs-keyword">return</span> a + b;<br>    }<br>  }<br>}<br><br><span class="hljs-keyword">let</span> c = MyClass();<br>c.add([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>])<br></code></pre></div><br>>> 3<br>	-<br><br><br>

