:Lang js
%%%
: This is the first card
:Front
Does it mutate `arr`?
`arr.concat(anotherArray)`

:Back
No

:Extra
`arr.concat(value1[, value2[, ...]])` takes one or more arrays or values as arguments.
```js
var array1 = ['a', 'b', 'c'];
var array2 = ['d', 'e', 'f'];

//["a", "b", "c", "d", "e", "f"]
array1.concat(array2);
```
https://mdn.io/array/concat

%%%
:Front
Does it mutate `arr`?
`arr.copyWithin(target, start, end)`

:Back
Yes

:Extra
`arr.copyWithin(target[, start[, end]])`
modifies and returns the array it is called on.
```js
var array1 = ['a', 'b', 'c', 'd', 'e'];

// copy to index 0 the element at index 3
// ["d", "b", "c", "d", "e"]
array1.copyWithin(0, 3, 4);

// copy to index 1 all elements from index 3 to the end
// ["d", "d", "e", "d", "e"]
array1.copyWithin(1, 3);
```
https://mdn.io/array/copyWithin

%%%
:Front
Does it mutate `arr`?
`arr.every((cur) => cur < 10)`

:Back
No

:Extra
`arr.every(callbackfn[, thisArg])` tests whether all elements in the array pass the test implemented by the provided function.
```js
// true
[1, 2, 3].every((cur) => cur < 10);
```
https://mdn.io/array/every

%%%
:Front
Does it mutate `arr`?
`arr.fill(value, start, end)`

:Back
Yes

:Extra
`arr.fill(value[, start[, end]])` fills all the elements of an array
from a start index to an end index with a static value.
```js
let arr = [1, 2, 3, 4];
// [1, 2, 0, 0]
arr.fill(0, 2, 4);
// [1, 5, 5, 5]
arr.fill(5, 1);
// [6, 6, 6, 6]
arr.fill(6)
```
https://mdn.io/array/fill

%%%
:Front
Does it mutate `arr`?
`arr.filter((cur) => cur % 2 === 0)`

:Back
No

:Extra
`arr.filter(callbackfn[, thisArg])` creates a new array with all elements that pass the test implemented by the provided function.
https://mdn.io/array/filter

%%%
:Front
Does it mutate `arr`?
`arr.flat(Infinity)`

:Back
No

:Extra
https://mdn.io/array/flat

%%%
:Front
Does it mutate `arr`?
`arr.forEach( cur => console.log(cur) );`

:Back
No

:Extra
https://mdn.io/array/foreach

%%%
:Front
Does it mutate `arr`?
`arr.map(cur => cur * 2);`

:Back
No

:Extra
https://mdn.io/array/map

%%%
:Front
Does it mutate `arr`?
`arr.reduce(callback, initialValue)`

:Back
No

:Extra
https://mdn.io/array/reduce

%%%
:Front
Does it mutate `arr`?
`arr.reduceRight(callback, initialValue)`

:Back
No

:Extra
https://mdn.io/array/reduceright

%%%
:Front
Does it mutate `arr`?
`arr.reverse()`

:Back
Yes

:Extra
https://mdn.io/array/reverse

%%%
:Front
Does it mutate `arr`?
`arr.slice(start, end)`

:Back
No

:Extra
https://mdn.io/array/slice

%%%
:Front
Does it mutate `arr`?
`arr.some((cur) => cur % 2 == 0)`

:Back
No

:Extra
https://mdn.io/array/some

%%%
:Front
Does it mutate `arr`?
`arr.sort(comparefn)`

:Back
Yes

:Extra
https://mdn.io/array/sort

%%%
:Front
Does it mutate `arr`?
`arr.splice(start, count[, item1[, item2[, ...]]])`

:Back
Yes

:Extra
https://mdn.io/array/splice

%%%
:Front
JS execute
```js
let s = new  Set(1, 2, 3);
s.has(2)
```

:Back
TypeError: number 1 is not iterable (cannot read property Symbol(Symbol.iterator))
    at new Set (<anonymous>)

:Extra
Syntax: `new Set([iterable])`

Usage:
```js
const set1 = new Set([1, 2, 3, 4, 5]);

console.log(set1.has(1));
// expected output: true
```

%%%
:Front
JS execute
```js
class MyClass{
  constructor(){
    this.add([a, b]){
      return a + b;
    }
  }
}

let c = MyClass();
c.add([1, 2])
```

:Back
SyntaxError: Unexpected token '{'

`this.add([a, b]){}` is not the correct way to declare a method. Instead use
`this.add = function([a, b]){}`

```js
class MyClass{
  constructor(){
    this.add = function ([a, b]){
      return a + b;
    }
  }
}

let c = MyClass();
c.add([1, 2])
```
>> 3

:Extra
-


